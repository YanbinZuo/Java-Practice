You are given an m * n integer matrix grid where each cell is either 0 (empty) or 1 (obstacle).
You can move up, down, left, or right from and to an empty cell in one step.
return the minimum number of steps to walk from the upper left corner (0,0) to the lower right 
corner (m-1, n-1). if it is not possible to find such walk return -1.

example
input: grid = [
  [0,0,0],
  [1,1,0],
  [0,0,0],
  [0,1,1],
  [0,0,0],
]
the shortest path is 10

example 2:
input: grid = [
  [0,1,1],
  [1,1,1],
  [1,0,0],
]
output: -1



  // Check for null or empty grid
        if (grid == null || grid.length == 0 || grid[0].length == 0) {
            return -1;
        }
        
        int n = grid.length;
        if (grid[0][0] != 0 || grid[n-1][n-1] != 0) return -1;



save distance and move the distance outside



what if you can eliminate at most k obstacles for the given matrix?
we need to find the longest path, how to do it?
for 1st example, k = 1, ans = 6

for 2nd example,
k=1, ans = -1
k=2, ans = 4

